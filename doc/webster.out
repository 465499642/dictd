DICTIONARY server protocol:

Contact name is "DICTIONARY".  A full connectional is established
(additional data in the RFC is ignored, there's no simple mode)

Command lines to the server are of the form

	COMMAND[<space>ARGUMENT]<NL>

where the part in brackets, [], is optional.  <space> is ASCII space,
octal 40, and <NL> for Chaosnet is the LispMachine NewLine character,
octal 215, and for Internet it's CRLF, octal 15 then octal 12.

The server responds with a single line of the same format, and then if
there's additional data it comes next, followed by an EOF packet.

The actual response will be either

	ERROR<space>RECOVERABLE<error message><NL>
or	ERROR<space>FATAL<error message><NL>

or a command-depenedent response.  FATAL-type errors are just that,
fatal, and the server will go away after sending the ERROR message.

Command:	HELP<NL>

This command will send back the text of this document, the dictionary
protocol, followed by <EOF>.

Command:	DEFINE<space>word<NL>

This is the command that asks for the defintion of a word from the
dictionary.  The possible response are:

	WILD<space>0<NL>

or
	WILD<NL>
	<word#><space><word1><NL>
	<word#><space><word2><NL>
		. . .
	<word#><space><wordN><NL>
	<EOF>

A WILD response is given when the word to be defined contained
wildcard characters ('%' which matches exactly one character, or '*'
which matches 0 or more characters).  If the wild string had no
matches, a WILD response with argument 0 is returned.  If there are
one or more matches, a WILD with no arg is returned, and then the
matching words are sent, one per line, followed by an EOF packet.  For
each returned word there is a word#, a string of ASCII digits
representing a decimal number.  For user convenience, that word#
may be specified in place of the word itself, in a DEFINE request.

	SPELLING<space>0<NL>

or
	SPELLING<NL>
	{ same response as WILD }

When a word is specified that couldn't be found verbatim, Webster
attempts to Do What You Mean, and try to fix common typos (transposed
letter, one missing or one additional letter, or one letter wrong).
If any such matches are found, a SPELL response is returned, listing
all the "possible" words.  If no such words were found, (e.g. it
couldn't make ANY sense out of the input word), a SPELL with argument
0 is returned.

	DEFINITION<space>n<NL>
then n	{ WILD-response-like lines }
then	<any amount of ASCII text>
	<EOF>

A DEFINITION response means the word matched an entry, and the definition
follows.  The argument (always present), n,  is the # of cross-references
in the definition that might prove interesting.  If n > 0, then follows
one line per cross-reference, in the same fork as the WILD responses.  Then
comes the body of the definition, followed by and <EOF>

Command:	COMPLETE<space>word<NL>

Is used to simulate is action of the TENEX/TWENEX <escape> completion
feature.  "word" is usually the beginning portion of a word that is
expected to be unique.  The response is either
	AMBIGUOUS<space>n<NL>

or
	COMPLETION<space>full-word<NL>

If the partial word you specified matches zero or more than one
dictionary entry, an AMBIGUOUS response is given, the argument
being the number of matches.

If the partial word matches one and only one entry, a COMPLETION
reply is sent back, containing the full text of the word that was
completed.  Note that COMPLETION and wildcard characters CAN be
mixed, so the user program should check the word being completed,
and if any wildcard characters exist (in the supplied part),
the entire word should be retyped, not just what was competed.

Command:	ENDINGS<space>word<NL>

This command is used to simulate the "?" TENEX/TWENEX feature.
The response is either

	MATCHS<space>0<NL>

or
	MATCHS<NL>
	{ WILD-like word-list }

What ENDINGS actually does is append a "*" to the word you gave and
check for WILD matches.  If there were none, you get the ENDINGS with
argument 0 response, else a WILD-like list of words.  NOTE that even
tho the word-line returned have a word#, that number does not work
the same as for WILD or SPELLING.  A number is present on the line so
that the response is in the same format as that of WILD or SPELLING,
to make it a little easier on the user program.  Those number shouldn't
be passed back as they don't mean anything.

Command:	SPELL<space>word<NL>

The SPELL command is for people who want to (ab)use the dictionary
server as a SPELL server.  The word is looked up, and if it matches
zero or one entries you get a

	SPELLING<space>matches<NL>

response where matches is 0 or 1.

If the word isn't found, but has possible alternate spellings, those
are returned exactly like a SPELLING response to DEFINE.
SPELL food
SPELLING 1
SPELL sdlfjdslf
SPELLING 0
SPELL eat food
SPELLING 0
SPELL ignore
SPELLING 1
ENDINGS ignore
MATCHS
1 ignore
ENDINGS love
MATCHS
1 love
2 love affair
3 love feast
4 love game
5 love knot
6 love seat
7 love set
8 love-in-a-mist
9 love-sick
10 lovebird
11 loveless
12 lovelily
13 loveliness
14 lovelock
15 lovelorn
16 lovely
17 lovemaking
18 lover
19 loverly
20 lovesome
QUIT
ERROR RECOVERABLEUnknown command: QUIT
END
ERROR RECOVERABLEUnknown command: END
EXIT
ERROR RECOVERABLEUnknown command: EXIT
BYE
ERROR RECOVERABLEUnknown command: BYE
